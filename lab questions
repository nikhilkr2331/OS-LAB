10.  IMPLEMENT INTER-PROCESS communication using pipes, you have to the pass the message from child to parent.

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>

int main(){
    int pipefd[2];
    char buffer[25];
    pid_t pid;
    if(pipe(pipefd)==-1){
    printf("pipe failed\n");
    return 1;
    }
    pid = fork();
    if(pid < 0){
    printf("fork failed\n");
    return 1;
    }
    if(pid > 0){
    close(pipefd[0]);
    printf("parent process writing to pipe...\n");
    write(pipefd[1],"Hello, child process!",22);
    close(pipefd[1]);
    }
    else{
    close(pipefd[1]);
    printf("child process reading from pipe...\n");
    read(pipefd[0],buffer,25);
    printf("child process received : %s\n", buffer);
    close(pipefd[0]);
    }
    return 0;
    }



9. Implement inter-process communication using shared memory.


shared_sender.c


#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/shm.h>
#include<string.h>
int main(){
void *shared_memory;
char buff[100];
int shmid;
shmid=shmget((key_t)1122, 1024, 0666|IPC_CREAT);
printf("Key of shared memory is %d\n",shmid);
shared_memory=shmat(shmid,NULL,0);
printf("Process attached at %p\n",shared_memory);
printf("Enter some data to write to shared memory\n");
read(0,buff,100);
strcpy(shared_memory,buff);
printf("You wrote : %s\n",(char *)shared_memory);
}




shared_receiver.c


#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/shm.h>
#include<string.h>
int main(){
void *shared_memory;
char buff[100];
int shmid;
shmid = shmget((key_t)1122, 1024, 0666);
printf("Key of shared memory is %d\n", shmid);
shared_memory=shmat(shmid,NULL,0);
printf("Process attached at %p\n",shared_memory);
printf("Data read from shared memory is : %s\n",(char *)shared_memory);
}




8.Write a program on process synchronization where you have a provided the solution to race condition using mutex_lock


#include<pthread.h>
#include<unistd.h>
void *fun1();
void *fun2();
int shared=1;
pthread_mutex_t l;
int main(){
pthread_mutex_init(&l, NULL);
pthread_t thread1, thread2;
pthread_create(&thread1, NULL, fun1, NULL);
pthread_create(&thread2, NULL, fun2, NULL);
pthread_join(thread1, NULL);
pthread_join(thread2, NULL);
printf("Final value of shared is %d\n", shared);
}

void *fun1(){
int x;
printf("Thread1 trying to acquire lock\n");
pthread_mutex_lock(&l);

printf("Thread1 acquired lock\n");
x=shared;
printf("Thread1 reads the value of shared variable as %d\n",x);
x++;
printf("Local updation by Thread1: %d\n",x);
sleep(1);
shared=x;
printf("Value of shared variable updated by Thread1 is: %d\n", shared);
pthread_mutex_unlock(&l);
printf("Thread1 released the lock\n");
}

void *fun2(){
int y;
printf("Thread2 trying to acquire lock\n");
pthread_mutex_lock(&l);
printf("Thread2 acquired lock\n");
y=shared;
printf("Thread2 reads the value as %d\n", y);
y--;
printf("Local updation by Thread2: %d\n",y);
sleep(1);
shared=y;
printf("Value of shared variable updated by Thread2 is: %d\n",shared);
pthread_mutex_unlock(&l);
printf("Thread2 released the lock\n");
}




7. write a program on process synchronization, where you have to provide to solution  to race condition using semaphores.


#include<pthread.h>
#include<stdio.h>
#include<semaphore.h>
#include<unistd.h>

void *fun1();
void *fun2();
int shared=1;
sem_t s;
int main(){
sem_init(&s,0,1);

pthread_t thread1, thread2;
pthread_create(&thread1, NULL, fun1, NULL);
pthread_create(&thread2, NULL, fun2, NULL);
pthread_join(thread1, NULL);
pthread_join(thread2, NULL);
printf("Final value of shared is %d\n",shared);
}

void *fun1(){
int x;
sem_wait(&s);
x=shared;
printf("Thread reads the value as %d\n",x);
x++;
printf("Local updation by Thread1: %d\n",x);
sleep(1);
shared=x;
printf("Value of shared variable updated by Thread1 is: %d\n", shared);
sem_post(&s);
}


void *fun2()
{
int y;
sem_wait(&s);
y=shared;
printf("Thread2 reads the value as %d\n",y);
y--;
printf("Local updation by Thread2: %d\n", y);
sleep(1);
shared=y;
printf("Value of shared variable updated by Thread2 is: %d\n",shared);
sem_post(&s);
}



6.  write a program using pthread to find the length of string, where strings are passed to thread function.



#include <stdio.h>
#include <pthread.h>
#include <string.h>

#define MAX_LENGTH 100

struct ThreadData {
    char *str;
    int start;
    int end;
    int length;
};

void *calculate_length(void *arg) {
    struct ThreadData *data = (struct ThreadData *)arg;
    for (int i = data->start; i < data->end && data->str[i] != '\0'; i++) {
        data->length++;
    }
    pthread_exit(NULL);
}


int main() {
    pthread_t tid1, tid2;
    char str[MAX_LENGTH];
    printf("Enter a string: ");
    fgets(str, MAX_LENGTH, stdin);
    str[strcspn(str, "\n")] = '\0';

    int len = strlen(str);
    struct ThreadData data1 = {str, 0, len / 2, 0};
    struct ThreadData data2 = {str, len / 2, len, 0};

    pthread_create(&tid1, NULL, calculate_length, (void *)&data1);
    pthread_create(&tid2, NULL, calculate_length, (void *)&data2);

    pthread_join(tid1, NULL);
    pthread_join(tid2, NULL);

    int total_length = data1.length + data2.length;
    printf("Total length of string: %d\n", total_length);

    return 0;
}


5. write a program that performs statistical operations of calculating the sum of numbers maximum and minimum
for a set of numbers. create three threads where each performs their respective operations.


#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>

#define NUM_THREADS 3

int array_size;
int numbers[100];

int sum = 0;
int max = INT_MIN;
int min = INT_MAX;

struct ThreadData {
  int start;
  int end;
};

void *calculate_sum(void *arg) {
  struct ThreadData *data = (struct ThreadData *)arg;
  for (int i = data->start; i < data->end; i++) {
    sum += numbers[i];
  }
  pthread_exit(NULL);
}

void *calculate_max(void *arg) {
  struct ThreadData *data = (struct ThreadData *)arg;
  for (int i = data->start; i < data->end; i++) {
    if (numbers[i] > max) {
      max = numbers[i];
    }
  }
  pthread_exit(NULL);
}

void *calculate_min(void *arg) {
  struct ThreadData *data = (struct ThreadData *)arg;
  for (int i = data->start; i < data->end; i++) {
    if (numbers[i] < min) {
      min = numbers[i];
    }
  }
  pthread_exit(NULL);
}

int main() {
  pthread_t threads[NUM_THREADS];
  struct ThreadData data[NUM_THREADS];

  // Get user input for array size
  printf("Enter the number of elements: ");
  scanf("%d", &array_size);

  if (array_size <= 0 || array_size > 100) {
    printf("Invalid input\n");
    return 1;
  }

  // Get user input for elements
  printf("Enter the elements:\n");
  for (int i = 0; i < array_size; i++) {
    scanf("%d", &numbers[i]);
  }

  // Divide the array into approximately equal parts for each thread
  int chunk_size = array_size / NUM_THREADS;
  for (int i = 0; i < NUM_THREADS; i++) {
    data[i].start = i * chunk_size;
    data[i].end = (i + 1) * chunk_size;
    if (i == NUM_THREADS - 1) {
      data[i].end = array_size; // Adjust last thread's end for potential remainder
    }
  }

  // Create threads for sum, max, and min
  pthread_create(&threads[0], NULL, calculate_sum, (void *)&data[0]);
  pthread_create(&threads[1], NULL, calculate_max, (void *)&data[1]);
  pthread_create(&threads[2], NULL, calculate_min, (void *)&data[2]);

  // Wait for all threads to finish
  for (int i = 0; i < NUM_THREADS; i++) {
    pthread_join(threads[i], NULL);
  }

  // Print the sum using atomic operation for thread safety
  printf("Sum: %d\n", __atomic_load_n(&sum, __ATOMIC_SEQ_CST));
  printf("Max: %d\n", max);
  printf("Min: %d\n", min);

  // Calculate and print the sum of max and min
  int sum_of_max_min = max + min;
  printf("Sum of Max and Min: %d\n", sum_of_max_min);

  return 0;
}

4. write a program on parent child process, where you have to simulate the execution of child before
parent.


#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

void child_process() {
    printf("Child process started\n");
    // Simulate child process execution
    for (int i = 0; i < 5; i++) {
        printf("Child process: %d\n", i);
    }
    printf("Child process finished\n");
}

int main() {
    pid_t pid = fork();

    if (pid == 0) {
        child_process();
    } else {
        printf("Parent process waiting for child...\n");
        waitpid(pid, 0, 0); // Wait for child process to finish
        printf("Parent process finished\n");
    }

    return 0;
}


3.  write a program using system call to read from console until user enters '@' and print the same on a file.



#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>

#define MAX_BUFFER_SIZE 1024

int main() {
    int fd_in, fd_out;
    char buffer[MAX_BUFFER_SIZE];
    int bytes_read;

    // Open standard input for reading
    fd_in = STDIN_FILENO;

    // Open the output file for writing (create if it doesn't exist)
    fd_out = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd_out == -1) {
        perror("open");
        return 1;
    }

    while ((bytes_read = read(fd_in, buffer, sizeof(buffer))) > 0) {
        // Check for '@' character
        if (buffer[0] == '@') {
            break;
        }

        // Write the read data to the file
        if (write(fd_out, buffer, bytes_read) == -1) {
            perror("write");
            close(fd_out);
            return 1;
        }
    }

    close(fd_out);

    if (bytes_read == -1) {
        perror("read");
        return 1;
    }

    printf("Input successfully written to output.txt\n");
    return 0;
}



2. write a program using shell script for displaying the list of odd numbers ranging from 21-121.


#!/bin/bash

# Loop through numbers from 21 to 121
for num in {21..121}; do
  # Check if the number is odd using modulo operator (%)
  if [[ $((num % 2)) -ne 0 ]]; then
    echo $num
  fi
done




1.  write a program using directory system calls make a directory on desktop and create a file inside the directory and list the contents of the directory.




write a program using the pthread library to create multiple threads that perform a specific
task(eg: print a message) and exit. The main program should wait for all threads to complete 
execution before terminating





#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>

void *print_message(void *arg) {
  char *message = (char *)arg;
  printf("%s\n", message);
  pthread_exit(NULL);
}

int main() {
  int num_threads = 5;
  pthread_t threads[num_threads];

  // Create threads
  for (int i = 0; i < num_threads; i++) {
    char *message = (char *)malloc(sizeof("Thread message"));
    sprintf(message, "Thread %d message", i + 1);
    pthread_create(&threads[i], NULL, print_message, (void *)message);
    free(message); // Free allocated memory for the message
  }

  // Wait for all threads to finish
  for (int i = 0; i < num_threads; i++) {
    pthread_join(threads[i], NULL);
  }

  printf("All threads completed.\n");
  return 0;
}





b) write a program to simulate race condition

#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>

int counter = 0;

void *increment(void *arg) {
  for (int i = 0; i < 100000; i++) {
    counter++;
  }
  pthread_exit(NULL);
}

int main() {
  pthread_t threads[10];

  // Create 10 threads
  for (int i = 0; i < 10; i++) {
    pthread_create(&threads[i], NULL, increment, NULL);
  }

  // Wait for all threads to finish
  for (int i = 0; i < 10; i++) {
    pthread_join(threads[i], NULL);
  }

  printf("Counter: %d\n", counter);

  return 0;
}



a) write a program that creates a child process and makes the parent process wait for the child process to complete its execution using the wait() system call

b) write a program that crates a child process and terminates the parent process immediately after
creating the child process. The child process should continue executing as an orphan process


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
  pid_t pid = fork();

  if (pid < 0) {
    // Error creating child process
    perror("fork");
    exit(1);
  } else if (pid == 0) {
    // Child process
    printf("Child process (PID: %d) started\n", getpid());
    sleep(3); // Simulate some work
    printf("Child process completed\n");
    exit(0);
  } else {
    // Parent process
    printf("Parent process (PID: %d) waiting for child...\n", getpid());
    int status;
    wait(&status); // Wait for child process to finish
    printf("Child process exited with status: %d\n", status);
  }

  return 0;
}




#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
  pid_t pid = fork();

  if (pid < 0) {
    // Error creating child process
    perror("fork");
    exit(1);
  } else if (pid == 0) {
    // Child process
    printf("Child process (PID: %d) started\n", getpid());
    sleep(3); // Simulate some work
    printf("Child process completed\n");
    exit(0);
  } else {
    // Parent process
    printf("Parent process (PID: %d) exiting immediately\n", getpid());
    exit(0); // Parent process terminates immediately
  }

  return 0;
}




A)write a program to create a shared memory segment and adding data info it.

B) write  a program using system calls to copy half the content of the file to a newly created file

a)first half of the file

b)second half of the file



#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/ipc.h>

#define SEGMENT_SIZE 1024

int main() {
  key_t key = IPC_PRIVATE; // Unique key for shared memory
  int shmid = shmget(key, SEGMENT_SIZE, IPC_CREAT | 0666); // Create shared memory segment

  if (shmid == -1) {
    perror("shmget");
    exit(1);
  }

  char *data = (char *)shmat(shmid, NULL, 0); // Attach shared memory segment

  if (data == (char *)-1) {
    perror("shmat");
    exit(1);
  }

  // Add data to the shared memory segment
  strcpy(data, "This is data stored in shared memory.");

  printf("Data added to shared memory: %s\n", data);

  // Detach shared memory segment
  shmdt(data);

  // Remove shared memory segment (optional)
  shmctl(shmid, IPC_RMID, NULL);

  return 0;
}



#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

#define BUFFER_SIZE 4096

void copy_first_half(int src_fd, int dst_fd) {
  char buffer[BUFFER_SIZE];
  int bytes_read;

  // Seek to the beginning of the source file
  lseek(src_fd, 0, SEEK_SET);

  while ((bytes_read = read(src_fd, buffer, BUFFER_SIZE)) > 0) {
    write(dst_fd, buffer, bytes_read);
  }

  if (bytes_read == -1) {
    perror("read");
    exit(1);
  }
}

void copy_second_half(int src_fd, int dst_fd) {
  char buffer[BUFFER_SIZE];
  int bytes_read;

  // Seek to the middle of the source file
  lseek(src_fd, 0, SEEK_END);
  off_t file_size = lseek(src_fd, 0, SEEK_CUR); // Get file size
  lseek(src_fd, file_size / 2, SEEK_SET);

  while ((bytes_read = read(src_fd, buffer, BUFFER_SIZE)) > 0) {
    write(dst_fd, buffer, bytes_read);
  }

  if (bytes_read == -1) {
    perror("read");
    exit(1);
  }
}

int main(int argc, char *argv[]) {
  if (argc != 3) {
    fprintf(stderr, "Usage: %s <source_file> <destination_file>\n", argv[0]);
    exit(1);
  }

  int src_fd = open(argv[1], O_RDONLY);
  if (src_fd == -1) {
    perror("open source file");
    exit(1);
  }

  int dst_fd_first_half = open("first_half.txt", O_CREAT | O_WRONLY | O_TRUNC, 0644);
  if (dst_fd_first_half == -1) {
    perror("open first half destination file");
    exit(1);
  }

  int dst_fd_second_half = open("second_half.txt", O_CREAT | O_WRONLY | O_TRUNC, 0644);
  if (dst_fd_second_half == -1) {
    perror("open second half destination file");
    exit(1);
  }

  copy_first_half(src_fd, dst_fd_first_half);
  copy_second_half(src_fd, dst_fd_second_half);

  close(src_fd);
  close(dst_fd_first_half);
  close(dst_fd_second_half);

  return 0;
}



a)WRITE A PROGRAM TO use directory system call and print the contents of the directory
b) write a program using directory and file manipulation system calls to copy the contents of one directory in a newly created directory



#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <sys/stat.h>
#include <unistd.h>

void print_dir_contents(const char *dir_path) {
  DIR *dir = opendir(dir_path);
  if (dir == NULL) {
    perror("opendir");
    exit(1);
  }

  struct dirent *entry;
  while ((entry = readdir(dir)) != NULL) {
    struct stat statbuf;
    if (lstat(entry->d_name, &statbuf) == -1) {
      perror("lstat");
      continue;
    }

    printf("%s\t", entry->d_name);

    if (S_ISDIR(statbuf.st_mode)) {
      printf("(directory)\n");
    } else if (S_ISREG(statbuf.st_mode)) {
      printf("(file)\n");
    } else {
      printf("(other)\n");
    }
  }

  closedir(dir);
}

int main(int argc, char *argv[]) {
  if (argc != 2) {
    fprintf(stderr, "Usage: %s <directory_path>\n", argv[0]);
    exit(1);
  }

  print_dir_contents(argv[1]);

  return 0;
}





#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <sys/stat.h>
#include <unistd.h>
#include <string.h>

void copy_dir(const char *src_dir, const char *dst_dir) {
  // Create destination directory if it doesn't exist
  if (mkdir(dst_dir, 0755) == -1 && errno != EEXIST) {
    perror("mkdir");
    exit(1);
  }

  DIR *dir = opendir(src_dir);
  if (dir == NULL) {
    perror("opendir");
    exit(1);
  }

  struct dirent *entry;
  while ((entry = readdir(dir)) != NULL) {
    if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) {
      continue; // Skip "." and ".." entries
    }

    struct stat statbuf;
    char src_path[PATH_MAX];
    char dst_path[PATH_MAX];

    snprintf(src_path, sizeof(src_path), "%s/%s", src_dir, entry->d_name);
    snprintf(dst_path, sizeof(dst_path), "%s/%s", dst_dir, entry->d_name);

    if (lstat(src_path, &statbuf) == -1) {
      perror("lstat");
      continue;
    }

    if (S_ISDIR(statbuf.st_mode)) {
      copy_dir(src_path, dst_path); // Recursively copy subdirectories
    } else if (S_ISREG(statbuf.st_mode)) {
      // Copy file
      int src_fd = open(src_path, O_RDONLY);
      if (src_fd == -1) {
        perror("open source file");
        continue;
      }

      int dst_fd = open(dst_path, O_CREAT | O_WRONLY | O_TRUNC, statbuf.st_mode);
      if (dst_fd == -1) {
        perror("open destination file");
        close(src_fd);
        continue;
      }

      char buffer[4096];
      int bytes_read;
      while ((bytes_read = read(src_fd, buffer, sizeof(buffer))) > 0) {
        write(dst_fd, buffer, bytes_read);
      }

      if (bytes_read == -1) {
        perror("read");
      }

      close(src_fd);
      close(dst_fd);
    }
  }

  closedir(dir);
}

int main(int argc, char *argv[]) {
  if (argc != 3) {
    fprintf(stderr, "Usage: %s <source_directory> <destination_directory>\n", argv[0]);
    exit(1);
  }

  copy_dir(argv[1], argv[2]);

  return 0;
}





a) write a program to implement the producer consumer problem using semaphores.
b) write a program to implement threading and synchronization applications.

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define BUFFER_SIZE 5

sem_t empty;
sem_t full;
int buffer[BUFFER_SIZE];
int in = 0, out = 0;

void *producer(void *arg) {
  for (int i = 0; i < 10; i++) {
    sem_wait(&empty); // Wait for an empty slot
    buffer[in] = i;
    printf("Producer produced: %d\n", buffer[in]);
    in = (in + 1) % BUFFER_SIZE;
    sem_post(&full); // Signal that a full slot is available
  }
  pthread_exit(NULL);
}

void *consumer(void *arg) {
  for (int i = 0; i < 10; i++) {
    sem_wait(&full); // Wait for a full slot
    int item = buffer[out];
    printf("Consumer consumed: %d\n", item);
    out = (out + 1) % BUFFER_SIZE;
    sem_post(&empty); // Signal that an empty slot is available
  }
  pthread_exit(NULL);
}

int main() {
  sem_init(&empty, 0, BUFFER_SIZE); // Initialize empty slots semaphore
  sem_init(&full, 0, 0); // Initialize full slots semaphore

  pthread_t producer_thread, consumer_thread;

  pthread_create(&producer_thread, NULL, producer, NULL);
  pthread_create(&consumer_thread, NULL, consumer, NULL);

  pthread_join(producer_thread, NULL);
  pthread_join(consumer_thread, NULL);

  sem_destroy(&empty);
  sem_destroy(&full);

  return 0;
}



#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

int counter = 0;
pthread_mutex_t mutex;

void *increment(void *arg) {
  for (int i = 0; i < 100000; i++) {
    pthread_mutex_lock(&mutex); // Acquire mutex before modifying counter
    counter++;
    pthread_mutex_unlock(&mutex); // Release mutex after modification
  }
  pthread_exit(NULL);
}

int main() {
  pthread_t threads[5];

  pthread_mutex_init(&mutex, NULL); // Initialize mutex

  // Create 5 threads
  for (int i = 0; i < 5; i++) {
    pthread_create(&threads[i], NULL, increment, NULL);
  }

  // Wait for all threads to finish
  for (int i = 0; i < 5; i++) {
    pthread_join(threads[i], NULL);
  }

  pthread_mutex_destroy(&mutex); // Destroy mutex

  printf("Counter: %d\n", counter);

  return 0;
}




a) write a program to implement IPC using shared memory
b) write a program using system calls to count the number of words in a text file.


#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/ipc.h>

#define SEGMENT_SIZE sizeof(int)

int main() {
  key_t key = IPC_PRIVATE; // Unique key for shared memory
  int shmid = shmget(key, SEGMENT_SIZE, IPC_CREAT | 0666); // Create shared memory segment

  if (shmid == -1) {
    perror("shmget");
    exit(1);
  }

  int *data = (int *)shmat(shmid, NULL, 0); // Attach shared memory segment

  if (data == (int *)-1) {
    perror("shmat");
    exit(1);
  }

  *data = 10; // Write data to shared memory

  printf("Data written to shared memory: %d\n", *data);

  // Detach shared memory segment
  shmdt(data);

  // Remove shared memory segment (optional)
  shmctl(shmid, IPC_RMID, NULL);

  return 0;
}




#include <stdio.h>
#include <stdlib.h>

int count_words(const char *filename) {
  int word_count = 0;
  int in_word = 0;
  FILE *fp = fopen(filename, "r");
  if (fp == NULL) {
    perror("fopen");
    exit(1);
  }

  int ch;
  while ((ch = fgetc(fp)) != EOF) {
    if (isalnum(ch)) {
      if (!in_word) {
        word_count++;
        in_word = 1;
      }
    } else {
      in_word = 0;
    }
  }

  fclose(fp);
  return word_count;
}

int main(int argc, char *argv[]) {
  if (argc != 2) {
    fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
    exit(1);
  }

  int word_count = count_words(argv[1]);
  printf("Number of words in the file: %d\n", word_count);

  return 0;
}




a) write a program using system calls to find and replace a specific word in a textfile.
b)write a program that uses the fork system call to create a child process that prints "Hello, World!" and the process ID.


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>

#define BUFFER_SIZE 4096

void find_and_replace(const char *filename, const char *old_word, const char *new_word) {
  char buffer[BUFFER_SIZE];
  int src_fd = open(filename, O_RDONLY);
  if (src_fd == -1) {
    perror("open source file");
    exit(1);
  }

  int tmp_fd = open("temp.txt", O_CREAT | O_WRONLY | O_TRUNC, 0644);
  if (tmp_fd == -1) {
    perror("open temporary file");
    exit(1);
  }

  int bytes_read;
  while ((bytes_read = read(src_fd, buffer, sizeof(buffer))) > 0) {
    char *ptr = buffer;
    while ((ptr = strstr(ptr, old_word)) != NULL) {
      int old_word_len = strlen(old_word);
      write(tmp_fd, buffer, ptr - buffer);
      write(tmp_fd, new_word, strlen(new_word));
      ptr += old_word_len;
      buffer[0] = '\0'; // Move remaining part of the buffer to the beginning
      memmove(buffer, ptr, bytes_read - (ptr - buffer));
    }
    write(tmp_fd, buffer, bytes_read);
  }

  close(src_fd);
  close(tmp_fd);

  // Replace the original file with the temporary file
  rename("temp.txt", filename);
}

int main(int argc, char *argv[]) {
  if (argc != 4) {
    fprintf(stderr, "Usage: %s <filename> <old_word> <new_word>\n", argv[0]);
    exit(1);
  }

  find_and_replace(argv[1], argv[2], argv[3]);

  return 0;
}



#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
  pid_t pid = fork();

  if (pid < 0) {
    // Error creating child process
    perror("fork");
    exit(1);
  } else if (pid == 0) {
    // Child process
    printf("Child process (PID: %d): Hello, World!\n", getpid());
  } else {
    // Parent process
    printf("Parent process (PID: %d)\n", getpid());
  }

  return 0;
}




a) write a shell program to check whether the fiven number is evern or odd
b) write a shell program to check the given year is a leap year or not.


#!/bin/bash

if [[ $# -ne 1 ]]; then
  echo "Usage: $0 <number>"
  exit 1
fi

number="$1"

if [[ $((number % 2)) -eq 0 ]]; then
  echo "$number is even"
else
  echo "$number is odd"
fi





#!/bin/bash

if [[ $# -ne 1 ]]; then
  echo "Usage: $0 <year>"
  exit 1
fi

year="$1"

if [[ $((year % 4)) -eq 0 && $((year % 100)) -ne 0 || $((year % 400)) -eq 0 ]]; then
  echo "$year is a leap year"
else
  echo "$year is not a leap year"
fi







a) write a shell program to find the factorial of a number.
b)write a shell program to swap the two integers.



#!/bin/bash

if [[ $# -ne 1 ]]; then
  echo "Usage: $0 <number>"
  exit 1
fi

number="$1"

if [[ $number -lt 0 ]]; then
  echo "Factorial is not defined for negative numbers"
  exit 1
fi

factorial=1

for ((i = 1; i <= number; i++)); do
  factorial=$((factorial * i))
done

echo "The factorial of $number is: $factorial"





#!/bin/bash

if [[ $# -ne 2 ]]; then
  echo "Usage: $0 <number1> <number2>"
  exit 1
fi

number1="$1"
number2="$2"

temp="$number1"
number1="$number2"
number2="$temp"

echo "After swapping:"
echo "Number 1: $number1"
echo "Number 2: $number2"




